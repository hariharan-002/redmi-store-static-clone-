{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap(),\n      keyString: new Map()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\nexport const templateCaches = new Map();","map":{"version":3,"names":["marker","Template","templateFactory","result","templateCache","templateCaches","get","type","undefined","stringsArray","WeakMap","keyString","Map","set","template","strings","key","join","getTemplateElement"],"sources":["D:\\my code\\my-app\\node_modules\\lit-html\\src\\lib\\template-factory.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behavior, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport interface TemplateCache {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>;\n  readonly keyString: Map<string, Template>;\n}\n\nexport const templateCaches = new Map<string, TemplateCache>();\n"],"mappings":"AAAA;;;;;;;;;;;;;AAeA,SAAQA,MAAM,EAAEC,QAAQ,QAAO,eAAe;AAwB9C;;;;AAIA,OAAM,SAAUC,eAAeA,CAACC,MAAsB;EACpD,IAAIC,aAAa,GAAGC,cAAc,CAACC,GAAG,CAACH,MAAM,CAACI,IAAI,CAAC;EACnD,IAAIH,aAAa,KAAKI,SAAS,EAAE;IAC/BJ,aAAa,GAAG;MACdK,YAAY,EAAE,IAAIC,OAAO,EAAkC;MAC3DC,SAAS,EAAE,IAAIC,GAAG;KACnB;IACDP,cAAc,CAACQ,GAAG,CAACV,MAAM,CAACI,IAAI,EAAEH,aAAa,CAAC;;EAGhD,IAAIU,QAAQ,GAAGV,aAAa,CAACK,YAAY,CAACH,GAAG,CAACH,MAAM,CAACY,OAAO,CAAC;EAC7D,IAAID,QAAQ,KAAKN,SAAS,EAAE;IAC1B,OAAOM,QAAQ;;EAGjB;EACA;EACA,MAAME,GAAG,GAAGb,MAAM,CAACY,OAAO,CAACE,IAAI,CAACjB,MAAM,CAAC;EAEvC;EACAc,QAAQ,GAAGV,aAAa,CAACO,SAAS,CAACL,GAAG,CAACU,GAAG,CAAC;EAC3C,IAAIF,QAAQ,KAAKN,SAAS,EAAE;IAC1B;IACAM,QAAQ,GAAG,IAAIb,QAAQ,CAACE,MAAM,EAAEA,MAAM,CAACe,kBAAkB,EAAE,CAAC;IAC5D;IACAd,aAAa,CAACO,SAAS,CAACE,GAAG,CAACG,GAAG,EAAEF,QAAQ,CAAC;;EAG5C;EACAV,aAAa,CAACK,YAAY,CAACI,GAAG,CAACV,MAAM,CAACY,OAAO,EAAED,QAAQ,CAAC;EACxD,OAAOA,QAAQ;AACjB;AAiBA,OAAO,MAAMT,cAAc,GAAG,IAAIO,GAAG,EAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}