{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes && trustedTypes.createPolicy('lit-html', {\n  createHTML: s => s\n});\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  constructor(strings, values, type, processor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML() {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment position.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) && s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] + attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] + marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n  getTemplateElement() {\n    const template = document.createElement('template');\n    let value = this.getHTML();\n    if (policy !== undefined) {\n      // this is secure because `this.strings` is a TemplateStringsArray.\n      // TODO: validate this when\n      // https://github.com/tc39/proposal-array-is-template-object is\n      // implemented.\n      value = policy.createHTML(value);\n    }\n    template.innerHTML = value;\n    return template;\n  }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML() {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n  getTemplateElement() {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}","map":{"version":3,"names":["reparentNodes","boundAttributeSuffix","lastAttributeNameRegex","marker","nodeMarker","policy","window","trustedTypes","createPolicy","createHTML","s","commentMarker","TemplateResult","constructor","strings","values","type","processor","getHTML","l","length","html","isCommentBinding","i","commentOpen","lastIndexOf","indexOf","attributeMatch","exec","substr","index","getTemplateElement","template","document","createElement","value","undefined","innerHTML","SVGTemplateResult","content","svgElement","firstChild","removeChild"],"sources":["D:\\my code\\my-app\\node_modules\\lit-html\\src\\lib\\template-result.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\ndeclare const trustedTypes: typeof window.trustedTypes;\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes!.createPolicy('lit-html', {createHTML: (s) => s});\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: readonly unknown[];\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: readonly unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment position.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    let value = this.getHTML();\n    if (policy !== undefined) {\n      // this is secure because `this.strings` is a TemplateStringsArray.\n      // TODO: validate this when\n      // https://github.com/tc39/proposal-array-is-template-object is\n      // implemented.\n      value = policy.createHTML(value) as unknown as string;\n    }\n    template.innerHTML = value;\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}