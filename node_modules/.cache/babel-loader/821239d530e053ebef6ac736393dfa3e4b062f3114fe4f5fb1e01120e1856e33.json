{"ast":null,"code":"/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = window.ShadowRoot && (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) && 'adoptedStyleSheets' in Document.prototype && 'replace' in CSSStyleSheet.prototype;\nconst constructionToken = Symbol();\nexport class CSSResult {\n  constructor(cssText, safeToken) {\n    if (safeToken !== constructionToken) {\n      throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n    this.cssText = cssText;\n  }\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet() {\n    if (this._styleSheet === undefined) {\n      // Note, if `supportsAdoptingStyleSheets` is true then we assume\n      // CSSStyleSheet is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n  toString() {\n    return this.cssText;\n  }\n}\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = value => {\n  return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = value => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\nexport const css = (strings, ...values) => {\n  const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n  return new CSSResult(cssText, constructionToken);\n};","map":{"version":3,"names":["supportsAdoptingStyleSheets","window","ShadowRoot","ShadyCSS","undefined","nativeShadow","Document","prototype","CSSStyleSheet","constructionToken","Symbol","CSSResult","constructor","cssText","safeToken","Error","styleSheet","_styleSheet","replaceSync","toString","unsafeCSS","value","String","textFromCSSResult","css","strings","values","reduce","acc","v","idx"],"sources":["D:\\my code\\my-app\\node_modules\\lit-element\\src\\lib\\css-tag.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = (window.ShadowRoot) &&\n    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  _styleSheet?: CSSStyleSheet|null;\n\n  readonly cssText: string;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet|null {\n    if (this._styleSheet === undefined) {\n      // Note, if `supportsAdoptingStyleSheets` is true then we assume\n      // CSSStyleSheet is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = (value: CSSResult|number) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n        `Value passed to 'css' function must be a 'css' function result: ${\n            value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\nexport const css =\n    (strings: TemplateStringsArray, ...values: (CSSResult|number)[]) => {\n      const cssText = values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]);\n      return new CSSResult(cssText, constructionToken);\n    };\n"],"mappings":"AAAA;;;;;;;;;;AAWA;;;AAGA,OAAO,MAAMA,2BAA2B,GAAIC,MAAM,CAACC,UAAU,KACxDD,MAAM,CAACE,QAAQ,KAAKC,SAAS,IAAIH,MAAM,CAACE,QAAQ,CAACE,YAAY,CAAC,IAC9D,oBAAoB,IAAIC,QAAQ,CAACC,SAAU,IAC3C,SAAS,IAAIC,aAAa,CAACD,SAAU;AAE1C,MAAME,iBAAiB,GAAGC,MAAM,EAAE;AAElC,OAAM,MAAOC,SAAS;EAKpBC,YAAYC,OAAe,EAAEC,SAAiB;IAC5C,IAAIA,SAAS,KAAKL,iBAAiB,EAAE;MACnC,MAAM,IAAIM,KAAK,CACX,mEAAmE,CAAC;;IAG1E,IAAI,CAACF,OAAO,GAAGA,OAAO;EACxB;EAEA;EACA;EACA,IAAIG,UAAUA,CAAA;IACZ,IAAI,IAAI,CAACC,WAAW,KAAKb,SAAS,EAAE;MAClC;MACA;MACA,IAAIJ,2BAA2B,EAAE;QAC/B,IAAI,CAACiB,WAAW,GAAG,IAAIT,aAAa,EAAE;QACtC,IAAI,CAACS,WAAW,CAACC,WAAW,CAAC,IAAI,CAACL,OAAO,CAAC;OAC3C,MAAM;QACL,IAAI,CAACI,WAAW,GAAG,IAAI;;;IAG3B,OAAO,IAAI,CAACA,WAAW;EACzB;EAEAE,QAAQA,CAAA;IACN,OAAO,IAAI,CAACN,OAAO;EACrB;;AAGF;;;;;;;AAOA,OAAO,MAAMO,SAAS,GAAIC,KAAc,IAAI;EAC1C,OAAO,IAAIV,SAAS,CAACW,MAAM,CAACD,KAAK,CAAC,EAAEZ,iBAAiB,CAAC;AACxD,CAAC;AAED,MAAMc,iBAAiB,GAAIF,KAAuB,IAAI;EACpD,IAAIA,KAAK,YAAYV,SAAS,EAAE;IAC9B,OAAOU,KAAK,CAACR,OAAO;GACrB,MAAM,IAAI,OAAOQ,KAAK,KAAK,QAAQ,EAAE;IACpC,OAAOA,KAAK;GACb,MAAM;IACL,MAAM,IAAIN,KAAK,CACX,mEACIM,KAAK;+CAC8B,CAAC;;AAEhD,CAAC;AAED;;;;;;AAMA,OAAO,MAAMG,GAAG,GACZA,CAACC,OAA6B,EAAE,GAAGC,MAA4B,KAAI;EACjE,MAAMb,OAAO,GAAGa,MAAM,CAACC,MAAM,CACzB,CAACC,GAAG,EAAEC,CAAC,EAAEC,GAAG,KAAKF,GAAG,GAAGL,iBAAiB,CAACM,CAAC,CAAC,GAAGJ,OAAO,CAACK,GAAG,GAAG,CAAC,CAAC,EAC9DL,OAAO,CAAC,CAAC,CAAC,CAAC;EACf,OAAO,IAAId,SAAS,CAACE,OAAO,EAAEJ,iBAAiB,CAAC;AAClD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}