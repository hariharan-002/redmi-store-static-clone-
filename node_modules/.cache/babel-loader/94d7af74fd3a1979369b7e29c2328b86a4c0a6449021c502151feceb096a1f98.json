{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  constructor(result, element) {\n    this.parts = [];\n    this.element = element;\n    const nodesToRemove = [];\n    const stack = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {\n      strings,\n      values: {\n        length\n      }\n    } = result;\n    while (partIndex < length) {\n      const node = walker.nextNode();\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop();\n        continue;\n      }\n      index++;\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if (node.hasAttributes()) {\n          const attributes = node.attributes;\n          const {\n            length\n          } = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue = node.getAttribute(attributeLookupName);\n            node.removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({\n              type: 'attribute',\n              index,\n              name,\n              strings: statics\n            });\n            partIndex += statics.length - 1;\n          }\n        }\n        if (node.tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = node.content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = node.data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] + match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({\n              type: 'node',\n              index: ++index\n            });\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            node.data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if (node.data === marker) {\n          const parent = node.parentNode;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({\n            type: 'node',\n            index\n          });\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            node.data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({\n              type: 'node',\n              index: -1\n            });\n            partIndex++;\n          }\n        }\n      }\n    }\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode.removeChild(n);\n    }\n  }\n}\nconst endsWith = (str, suffix) => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = part => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;","map":{"version":3,"names":["marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","constructor","result","element","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","currentNode","pop","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","nextSibling","n","removeChild","str","suffix","isTemplatePartActive","part","createComment"],"sources":["D:\\my code\\my-app\\node_modules\\lit-html\\src\\lib\\template.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node'; index: number;\n}|{\n  readonly type: 'attribute';\n  index: number;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    // eslint-disable-next-line no-control-regex\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}