{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(element, name, strings, options) {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options) {\n    return new NodePart(options);\n  }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();","map":{"version":3,"names":["AttributeCommitter","BooleanAttributePart","EventPart","NodePart","PropertyCommitter","DefaultTemplateProcessor","handleAttributeExpressions","element","name","strings","options","prefix","committer","slice","parts","eventContext","handleTextExpression","defaultTemplateProcessor"],"sources":["D:\\my code\\my-app\\node_modules\\lit-html\\src\\lib\\default-template-processor.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n"],"mappings":"AAAA;;;;;;;;;;;;;AAeA,SAAQA,kBAAkB,EAAEC,oBAAoB,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,iBAAiB,QAAO,YAAY;AAI3G;;;AAGA,OAAM,MAAOC,wBAAwB;EACnC;;;;;;;;;EASAC,0BAA0BA,CACtBC,OAAgB,EAAEC,IAAY,EAAEC,OAAiB,EACjDC,OAAsB;IACxB,MAAMC,MAAM,GAAGH,IAAI,CAAC,CAAC,CAAC;IACtB,IAAIG,MAAM,KAAK,GAAG,EAAE;MAClB,MAAMC,SAAS,GAAG,IAAIR,iBAAiB,CAACG,OAAO,EAAEC,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,EAAEJ,OAAO,CAAC;MACxE,OAAOG,SAAS,CAACE,KAAK;;IAExB,IAAIH,MAAM,KAAK,GAAG,EAAE;MAClB,OAAO,CAAC,IAAIT,SAAS,CAACK,OAAO,EAAEC,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,EAAEH,OAAO,CAACK,YAAY,CAAC,CAAC;;IAEtE,IAAIJ,MAAM,KAAK,GAAG,EAAE;MAClB,OAAO,CAAC,IAAIV,oBAAoB,CAACM,OAAO,EAAEC,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,EAAEJ,OAAO,CAAC,CAAC;;IAEpE,MAAMG,SAAS,GAAG,IAAIZ,kBAAkB,CAACO,OAAO,EAAEC,IAAI,EAAEC,OAAO,CAAC;IAChE,OAAOG,SAAS,CAACE,KAAK;EACxB;EACA;;;;EAIAE,oBAAoBA,CAACN,OAAsB;IACzC,OAAO,IAAIP,QAAQ,CAACO,OAAO,CAAC;EAC9B;;AAGF,OAAO,MAAMO,wBAAwB,GAAG,IAAIZ,wBAAwB,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}