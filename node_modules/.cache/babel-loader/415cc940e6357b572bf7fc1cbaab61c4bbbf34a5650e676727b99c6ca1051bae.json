{"ast":null,"code":"// Generated by CoffeeScript 1.12.4\nvar Dumper, Parser, Utils, Yaml;\nParser = require('./Parser');\nDumper = require('./Dumper');\nUtils = require('./Utils');\nYaml = function () {\n  function Yaml() {}\n  Yaml.parse = function (input, exceptionOnInvalidType, objectDecoder) {\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n    return new Parser().parse(input, exceptionOnInvalidType, objectDecoder);\n  };\n  Yaml.parseFile = function (path, callback, exceptionOnInvalidType, objectDecoder) {\n    var input;\n    if (callback == null) {\n      callback = null;\n    }\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n    if (callback != null) {\n      return Utils.getStringFromFile(path, function (_this) {\n        return function (input) {\n          var result;\n          result = null;\n          if (input != null) {\n            result = _this.parse(input, exceptionOnInvalidType, objectDecoder);\n          }\n          callback(result);\n        };\n      }(this));\n    } else {\n      input = Utils.getStringFromFile(path);\n      if (input != null) {\n        return this.parse(input, exceptionOnInvalidType, objectDecoder);\n      }\n      return null;\n    }\n  };\n  Yaml.dump = function (input, inline, indent, exceptionOnInvalidType, objectEncoder) {\n    var yaml;\n    if (inline == null) {\n      inline = 2;\n    }\n    if (indent == null) {\n      indent = 4;\n    }\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectEncoder == null) {\n      objectEncoder = null;\n    }\n    yaml = new Dumper();\n    yaml.indentation = indent;\n    return yaml.dump(input, inline, 0, exceptionOnInvalidType, objectEncoder);\n  };\n  Yaml.stringify = function (input, inline, indent, exceptionOnInvalidType, objectEncoder) {\n    return this.dump(input, inline, indent, exceptionOnInvalidType, objectEncoder);\n  };\n  Yaml.load = function (path, callback, exceptionOnInvalidType, objectDecoder) {\n    return this.parseFile(path, callback, exceptionOnInvalidType, objectDecoder);\n  };\n  return Yaml;\n}();\nif (typeof window !== \"undefined\" && window !== null) {\n  window.YAML = Yaml;\n}\nif (typeof window === \"undefined\" || window === null) {\n  this.YAML = Yaml;\n}\nmodule.exports = Yaml;","map":{"version":3,"names":["Dumper","Parser","Utils","Yaml","require","parse","input","exceptionOnInvalidType","objectDecoder","parseFile","path","callback","getStringFromFile","_this","result","dump","inline","indent","objectEncoder","yaml","indentation","stringify","load","window","YAML","module","exports"],"sources":["D:/my code/my-app/node_modules/yamljs/lib/Yaml.js"],"sourcesContent":["// Generated by CoffeeScript 1.12.4\nvar Dumper, Parser, Utils, Yaml;\n\nParser = require('./Parser');\n\nDumper = require('./Dumper');\n\nUtils = require('./Utils');\n\nYaml = (function() {\n  function Yaml() {}\n\n  Yaml.parse = function(input, exceptionOnInvalidType, objectDecoder) {\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n    return new Parser().parse(input, exceptionOnInvalidType, objectDecoder);\n  };\n\n  Yaml.parseFile = function(path, callback, exceptionOnInvalidType, objectDecoder) {\n    var input;\n    if (callback == null) {\n      callback = null;\n    }\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n    if (callback != null) {\n      return Utils.getStringFromFile(path, (function(_this) {\n        return function(input) {\n          var result;\n          result = null;\n          if (input != null) {\n            result = _this.parse(input, exceptionOnInvalidType, objectDecoder);\n          }\n          callback(result);\n        };\n      })(this));\n    } else {\n      input = Utils.getStringFromFile(path);\n      if (input != null) {\n        return this.parse(input, exceptionOnInvalidType, objectDecoder);\n      }\n      return null;\n    }\n  };\n\n  Yaml.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {\n    var yaml;\n    if (inline == null) {\n      inline = 2;\n    }\n    if (indent == null) {\n      indent = 4;\n    }\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectEncoder == null) {\n      objectEncoder = null;\n    }\n    yaml = new Dumper();\n    yaml.indentation = indent;\n    return yaml.dump(input, inline, 0, exceptionOnInvalidType, objectEncoder);\n  };\n\n  Yaml.stringify = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {\n    return this.dump(input, inline, indent, exceptionOnInvalidType, objectEncoder);\n  };\n\n  Yaml.load = function(path, callback, exceptionOnInvalidType, objectDecoder) {\n    return this.parseFile(path, callback, exceptionOnInvalidType, objectDecoder);\n  };\n\n  return Yaml;\n\n})();\n\nif (typeof window !== \"undefined\" && window !== null) {\n  window.YAML = Yaml;\n}\n\nif (typeof window === \"undefined\" || window === null) {\n  this.YAML = Yaml;\n}\n\nmodule.exports = Yaml;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}