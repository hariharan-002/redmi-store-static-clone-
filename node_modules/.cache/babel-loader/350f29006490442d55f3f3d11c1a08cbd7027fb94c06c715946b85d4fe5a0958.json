{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n  let part = parts.get(container);\n  if (part === undefined) {\n    removeNodes(container, container.firstChild);\n    parts.set(container, part = new NodePart(Object.assign({\n      templateFactory\n    }, options)));\n    part.appendInto(container);\n  }\n  part.setValue(result);\n  part.commit();\n};","map":{"version":3,"names":["removeNodes","NodePart","templateFactory","parts","WeakMap","render","result","container","options","part","get","undefined","firstChild","set","Object","assign","appendInto","setValue","commit"],"sources":["D:\\my code\\my-app\\node_modules\\lit-html\\src\\lib\\render.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n"],"mappings":"AAAA;;;;;;;;;;;;;AAcA,SAAQA,WAAW,QAAO,UAAU;AACpC,SAAQC,QAAQ,QAAO,YAAY;AAEnC,SAAQC,eAAe,QAAO,uBAAuB;AAErD,OAAO,MAAMC,KAAK,GAAG,IAAIC,OAAO,EAAkB;AAElD;;;;;;;;;;;;;;;AAeA,OAAO,MAAMC,MAAM,GACfA,CAACC,MAAe,EACfC,SAAmC,EACnCC,OAAgC,KAAI;EACnC,IAAIC,IAAI,GAAGN,KAAK,CAACO,GAAG,CAACH,SAAS,CAAC;EAC/B,IAAIE,IAAI,KAAKE,SAAS,EAAE;IACtBX,WAAW,CAACO,SAAS,EAAEA,SAAS,CAACK,UAAU,CAAC;IAC5CT,KAAK,CAACU,GAAG,CAACN,SAAS,EAAEE,IAAI,GAAG,IAAIR,QAAQ,CAAAa,MAAA,CAAAC,MAAA;MACjBb;IAAe,GACZM,OAAO,EACV,CAAC;IACxBC,IAAI,CAACO,UAAU,CAACT,SAAS,CAAC;;EAE5BE,IAAI,CAACQ,QAAQ,CAACX,MAAM,CAAC;EACrBG,IAAI,CAACS,MAAM,EAAE;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}